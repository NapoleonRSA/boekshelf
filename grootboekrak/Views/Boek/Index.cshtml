@model dynamic

@{
    ViewBag.Title = "Index";
}

<h2 style="color: #e6e6fa">Inventory List</h2>
<br/>
<div class="container-fluid row" id="listDiv">
    <div class=" jumbotron">
        <input class="form-control" data-bind=" value: searchText , valueUpdate: 'keyup' " placeholder="Search for Book"/>
        <hr/>
        <nav>
            <ul class="pagination">
                <li>
                    <a href="#" aria-label="Previous" data-bind="click: backClick">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
                <!-- ko foreach: pageNumbers-->
                    <li><a data-bind="text: $data, css:{'btn-primary active':$data===$parent.currentPage() +1},click: $parent.changeCurrentPage " href="#"></a></li>
                <!--/ko-->
                <li>
                    <a href="#" aria-label="Next" data-bind="click: nextClick" >
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            </ul>
        </nav>
        <table class="table table-condensed ">
            <thead>
            <tr>
                <td><h4><strong>Id</strong></h4></td>
                <td><h4><strong>Title</strong></h4></td>
                <td><h4><strong>Author</strong></h4></td>
                <td><h4><strong>Genres</strong></h4></td>
                <td><h4><strong>Published</strong></h4></td>
            </tr>
            </thead>
            <tbody data-bind="foreach: pageFilteredBooks">
            <tr>
                <td data-bind="text: Id"></td>
                <td data-bind="text: Title"></td>
                <td data-bind="text: Author"></td>
                <td data-bind="text: Genres"></td>
                <td data-bind="text: Published"></td>
                <td>
                    <button class="btn btn-group-sm btn-success " data-bind="click: $parent.editClick "><i class="glyphicon glyphicon-edit"></i> Edit</button>
                    <button class="btn btn-group-sm btn-danger " data-bind="click: $parent.deleteClick "> <i class="glyphicon glyphicon-trash"></i> Delete</button>
                </td>
            </tr>
            </tbody>
        </table>
        <div class="col-lg-2">
            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#myModal">
                <i class="glyphicon glyphicon-filter"></i>
                Filter
            </button>
            <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span></button>
                            <h4 class="modal-title" id="myModalLabel">Choose Filter Settings</h4>
                        </div>
                        <div class="modal-body">
                            <div>
                                <label class="col-lg-3">Genres :</label>
                                <select class=" form-control " data-bind="options: possibleGenres, value: genre, optionsCaption: 'Select a genre...'"></select>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary" data-bind="click: filterClick">Display changes</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script>
        var model = @Html.Raw(Json.Encode(Model));
        var BookViewModel = function() {
            var self = this;
            self.searchText = ko.observable();

            self.searchText.subscribe(function() {

                self.filterBooks([]);
                self.currentPage(0);
                ko.utils.arrayForEach(self.books(),
                    function(book) {

                        if (book.Genres.indexOf(self.searchText()) > -1 || book.Title.indexOf(self.searchText()) > -1
                        ) {
                            self.filterBooks.push(book);
                        }
                    });
            });

            self.possibleGenres = ["All", "Fiction", "Non-Fiction", "Drama", "Horror"];
            self.books = ko.observableArray(model.Books);
            self.filterBooks = ko.observableArray(model.Books);
            self.genre = ko.observable("");
            self.id = ko.observable();
            self.editClick = function(book) {
                changeLocation("Boek/Edit/" + book.Id, true);
            };
            self.deleteClick = function(book) {
                changeLocation("Boek/Delete/" + book.Id, true);
                alert("Book Deleted");
            };
            self.filterClick = function() {
                alert(self.genre());
                self.filterBooks([]);
                if (self.genre() === "All") {
                    self.filterBooks(self.books());
                    return;

                }
                ko.utils.arrayForEach(self.books(),
                    function(book) {

                        if (book.Genres === self.genre()) {
                            self.filterBooks.push(book);
                        }
                    });
            };

            self.currentPage = ko.observable(0);
            var pageSize = 10;
            self.pageFilteredBooks = ko.computed(function() {
                
                var startIndex = self.currentPage() * pageSize ;
                return self.filterBooks.slice(startIndex, startIndex + pageSize);
            }, self);

            self.pageNumbers = ko.computed(function() {
                var numberofpages = self.filterBooks().length / pageSize;
                var pages = [];
                for (var i = 0; i < numberofpages; i++) {
                    pages.push(i + 1);
                }
                return pages;
            });
            self.changeCurrentPage = function(pageNumber) {
                self.currentPage(pageNumber - 1);
            }
            self.backClick = function() {
                if (self.currentPage() === 0) {
                    return;
                }

                self.currentPage(self.currentPage() - 1);
            };
            self.nextClick = function() {
                if (self.currentPage() === self.pageNumbers().length - 1) {
                    return;
                }

                self.currentPage(self.currentPage() + 1);
            };
        };
        ko.applyBindings(new BookViewModel(), document.getElementById("listDiv"));
    </script>
}